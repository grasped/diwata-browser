# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DiwataBrowser
                                 A QGIS plugin
 This plugin enables user to browse and load Diwata-2 SMI products.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-08
        git sha              : $Format:%H$
        copyright            : (C) 2021 by STAMINA4Space
        email                : cnpante@stamina4space.upd.edu.ph
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import functools
import json
import os.path
import requests
from .crs import crs4326, get_project_crs, transform

from qgis.PyQt.QtCore import QSettings
from qgis.PyQt.QtCore import QTranslator
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtCore import QUrl
from qgis.PyQt.QtCore import QUrlQuery
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtCore import QDateTime

from qgis.PyQt.QtGui import QIcon, QImage, QPixmap, QColor

from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtWidgets import QTableWidgetItem
from qgis.PyQt.QtWidgets import QHeaderView
from qgis.PyQt.QtWidgets import QFileDialog

from qgis.PyQt.QtNetwork import QNetworkRequest

from qgis.core import QgsProject
from qgis.core import QgsNetworkAccessManager
from qgis.core import QgsNetworkReplyContent
from qgis.core import QgsVectorLayer
from qgis.core import QgsRasterLayer
from qgis.core import QgsPointXY
from qgis.core import QgsGeometry
from qgis.core import QgsCoordinateReferenceSystem
from qgis.core import QgsReferencedRectangle

from qgis.gui import QgsRubberBand

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .diwata_browser_dialog import DiwataBrowserDialog
from .threads import LoadCollection
from .threads import LoadItem
from .threads import LoadRaster



class DiwataBrowser:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DiwataBrowser_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Diwata Browser')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Added variables by author
        self.selected_item = None
        self.selected_pixmap = None
        self.download_path = None
        self.rubberband = self.create_rubberband()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        return QCoreApplication.translate('DiwataBrowser', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        current_dir = os.path.dirname(os.path.abspath(__file__))
        icon_path = os.path.join(current_dir, 'icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'Diwata Browser'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Diwata Browser'),
                action)
            self.iface.removeToolBarIcon(action)

    def set_download_path(self):
        self.dlg.download_lineEdit.clear()
        self.download_path = QFileDialog.getExistingDirectory(
            None, 'Select Folder')
        self.dlg.download_lineEdit.setText(self.download_path)


    def load_collection(self):
        self.dlg.tableWidget.setRowCount(0)
        self.dlg.items_listWidget.clear()
        start_time = self.dlg.temporal_start_dateTime.dateTime().toUTC().toString(Qt.ISODate)
        end_time = self.dlg.temporal_end_dateTime.dateTime().toUTC().toString(Qt.ISODate)

        self.collection = LoadCollection(start_time, end_time)
        self.collection.start()
        self.collection.started.connect(self.loading_collection)
        self.collection.error_signal.connect(self.loading_collection_error)
        self.collection.listed_items_signal.connect(self.display_items)
        self.collection.finished.connect(self.loaded_collection)

    def loading_collection(self):
        self.dlg.image_label.setText("Loading collection...")

    def loaded_collection(self):
        self.dlg.image_label.setText("")

    def loading_collection_error(self):
        self.iface.messageBar().pushMessage("Diwata Browser", 
            "Error connecting to collection.",
            level=1)

    def display_items(self, items):
        for item in items:
            self.dlg.items_listWidget.addItem(item)


    def load_item(self):
        self.dlg.tableWidget.setRowCount(0)

        if not self.dlg.items_listWidget.currentItem():
            return

        item_id = self.dlg.items_listWidget.currentItem().text()
        self.item = LoadItem(self.download_path, item_id)
        self.item.start()
        self.item.started.connect(self.loading_item)
        self.item.item_info.connect(self.display_item_info)
        self.item.thumbnail_signal.connect(self.display_thumbnail)
        self.item.footprint_signal.connect(self.draw_footprint)

    def draw_footprint(self, item):
        self.rubberband.hide()

        if not item.geometry:
            return

        geom = None

        if item.geometry['type'] == 'Polygon':
            parts = [[QgsPointXY(x, y) for [x, y] in part]
                     for part in item.geometry['coordinates']]
            geom = QgsGeometry.fromPolygonXY(parts)
        elif item.geometry['type'] == 'MultiPolygon':
            parts = [[[QgsPointXY(x, y) for [x, y] in part] for part in multi]
                     for multi in item.geometry['coordinates']]
            geom = QgsGeometry.fromMultiPolygonXY(parts)
        else:
            # unsupported geometry type
            return

        self.rubberband.setToGeometry(geom, QgsCoordinateReferenceSystem.fromEpsgId(4326))
        self.rubberband.show()

        bbox = transform(
            crs4326, 
            get_project_crs(), 
            geom.boundingBox())

        # TODO one day setExtent will support QgsReferencedRectangle :)
        self.iface.mapCanvas().setExtent(QgsReferencedRectangle(bbox, get_project_crs()))
        self.iface.mapCanvas().refresh()


    def debug_message(self, message):
        self.dlg.info_textEdit.setText(message)

    def loading_item(self):
        self.dlg.image_label.setText("Loading item preview...")

    def display_item_info(self, item):
        self.selected_item = item
        self.dlg.tableWidget.setColumnCount(2)
        self.dlg.tableWidget.setRowCount(8)

        self.dlg.tableWidget.setItem(0, 0, QTableWidgetItem("id"))
        self.dlg.tableWidget.setItem(0, 1, QTableWidgetItem(
            self.selected_item.id))
        self.dlg.tableWidget.setItem(1, 0, QTableWidgetItem("stac_version"))
        self.dlg.tableWidget.setItem(1, 1, QTableWidgetItem(
            self.selected_item.stac_version))
        self.dlg.tableWidget.setItem(2, 0, QTableWidgetItem("bbox"))
        self.dlg.tableWidget.setItem(2, 1, QTableWidgetItem(
            str(self.selected_item.bbox)))
        self.dlg.tableWidget.setItem(3, 0, QTableWidgetItem("start_datetime"))
        self.dlg.tableWidget.setItem(3, 1, QTableWidgetItem(
            self.selected_item.start_datetime))
        self.dlg.tableWidget.setItem(4, 0, QTableWidgetItem("end_datetime"))
        self.dlg.tableWidget.setItem(4, 1, QTableWidgetItem(
            self.selected_item.end_datetime))
        self.dlg.tableWidget.setItem(5, 0, QTableWidgetItem("platform"))
        self.dlg.tableWidget.setItem(5, 1, QTableWidgetItem(
            str(self.selected_item.platform)))
        self.dlg.tableWidget.setItem(6, 0, QTableWidgetItem("payload"))
        self.dlg.tableWidget.setItem(6, 1, QTableWidgetItem(
            str(self.selected_item.payload)))
        self.dlg.tableWidget.setItem(7, 0, QTableWidgetItem("eo:bands"))
        self.dlg.tableWidget.setItem(7, 1, QTableWidgetItem(
            str(self.selected_item.bands)))

        header = self.dlg.tableWidget.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.Stretch)

        self.dlg.tableWidget.horizontalHeader().setVisible(False)
        self.dlg.tableWidget.verticalHeader().setVisible(False)


    def display_thumbnail(self, pixmap):
        self.selected_pixmap = pixmap
        pixmap = pixmap.scaled(300, 300,
            #self.dlg.image_label.size().width(),
            #self.dlg.image_label.size().height(), 
            aspectRatioMode=Qt.KeepAspectRatio,
            transformMode=Qt.SmoothTransformation)

        self.dlg.image_label.setPixmap(pixmap)

    def resize_event(self):
        if self.selected_pixmap is None:
            return
        self.set_preview()

    def set_preview(self):
        if self.selected_pixmap is None:
            return
        else:
            pixmap = self.selected_pixmap.scaled(
                self.dlg.image_label.size().width(),
                self.dlg.image_label.size().height(), 
                aspectRatioMode=Qt.KeepAspectRatio,
                transformMode=Qt.SmoothTransformation
                )

        self.dlg.image_label.setPixmap(pixmap)

    def load_raster(self):
        self.rubberband.hide()
        if not self.download_path:
            self.iface.messageBar().pushMessage("Diwata Browser", 
                "Set a valid download path.",
                level=1)
            return
        elif not os.path.isdir(self.download_path):
            self.iface.messageBar().pushMessage("Diwata Browser", 
                "Set a valid download path.",
                level=1)
            return

        self.raster = LoadRaster(self.download_path, self.selected_item)
        self.raster.start()
        self.raster.raster_downloaded.connect(self.display_to_qgis)

    def display_to_qgis(self, path, basename):
        rlayer = QgsRasterLayer(path, basename)
        if not rlayer.isValid():
            self.iface.messageBar().pushMessage("Diwata Browser", 
                "Layer failed to load.",
                level=1)

        self.iface.addRasterLayer(path, basename)

    def create_rubberband(self):
        rubberband = QgsRubberBand(self.iface.mapCanvas(), True)
        rubberband.setColor(QColor(254, 178, 76, 63))
        rubberband.setWidth(1)

        return rubberband

    def set_datetime(self):
        start_time = QDateTime(2018, 10, 29, 0, 0, 0)
        end_time = QDateTime.currentDateTime()
        self.dlg.temporal_start_dateTime.setDateTime(start_time)
        self.dlg.temporal_end_dateTime.setDateTime(end_time)

    def close_event(self):
        self.rubberband.hide()


    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg = DiwataBrowserDialog()
            self.rubberband.hide()
            self.set_datetime()
            self.dlg.closed_signal.connect(self.close_event)
            #self.dlg.resize_signal.connect(self.resize_event)
            self.dlg.buttonBox.rejected.connect(self.close_event)
            self.dlg.search_button.clicked.connect(self.load_collection)
            self.dlg.items_listWidget.currentItemChanged.connect(self.load_item)
            self.dlg.download_browseButton.clicked.connect(self.set_download_path)
            self.dlg.load_raster_button.clicked.connect(self.load_raster)


        project = QgsProject.instance()
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            self.rubberband.hide()
            pass


            
            
